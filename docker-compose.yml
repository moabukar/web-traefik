version: "3"

services:
  # Traefik service (container)
  traefik:
    image: "traefik:v2.9"
    container_name: "traefik"
    # Commands listed below determine configuration of our traefik instance
    command:
      - "--api.insecure=true" # Enables traefik dashboard that will listen on port 8080
      - "--providers.docker=true" # Defines docker as a provider
      - "--providers.docker.exposedbydefault=false" # Prevents from exposing all containers by default
      - "--entrypoints.web.address=:80" # Will listen to incoming requests on port 80
    
    # Here we map ports from container to our host machine
    # which means that port 80 on our machine will access port 80 in traefik service
    ports:
      - "80:80"
      - "8080:8080"
  api:
    build:
        dockerfile: api.Dockerfile
        context: .
    volumes:
      - ./api:/code
    networks:
      - traefik_webgateway
    restart: on-failure
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.fastapi.rule=Host(`api.mysuperapp.localhost`)"
      - "traefik.http.routers.fastapi.entrypoints=web"
      - "traefik.http.services.fastapi.loadbalancer.server.port=8000"
      - "traefik.docker.network=traefik_webgateway"

  frontend:
    build:
      dockerfile: frontend.Dockerfile
      context: .
    networks:
      - traefik_webgateway
    depends_on:
      - api
    volumes:
      - ./frontend/dist/:/usr/share/nginx/html/
    restart: on-failure
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.webappfrontend.rule=Host(`mysuperapp.localhost`)"
      - "traefik.http.routers.webappfrontend.entrypoints=web"
      - "traefik.http.services.webappfrontend.loadbalancer.server.port=80"
      - "traefik.docker.network=traefik_webgateway"

networks:
  traefik_webgateway:
    external: true
